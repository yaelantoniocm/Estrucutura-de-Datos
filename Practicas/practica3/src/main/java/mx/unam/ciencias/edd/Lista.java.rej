--- src/main/java/mx/unam/ciencias/edd/Lista.java
+++ src/main/java/mx/unam/ciencias/edd/Lista.java
@@ -28,7 +28,7 @@ public class Lista<T> implements Coleccion<T> {
 
         /* Construye un nodo con un elemento. */
         public Nodo(T elemento) {
-            // Aquí va su código.
+            this.elemento = elemento;
         }
     }
 
@@ -41,37 +41,45 @@ public class Lista<T> implements Coleccion<T> {
 
         /* Construye un nuevo iterador. */
         public Iterador() {
-            // Aquí va su código.
+            this.start();
         }
 
         /* Nos dice si hay un elemento siguiente. */
         @Override public boolean hasNext() {
-            // Aquí va su código.
+            return this.siguiente != null;
         }
 
         /* Nos da el elemento siguiente. */
         @Override public T next() {
-            // Aquí va su código.
+            if(hasNext() != true) throw new NoSuchElementException();
+            anterior = siguiente;
+            siguiente = siguiente.siguiente;
+            return anterior.elemento;
         }
 
         /* Nos dice si hay un elemento anterior. */
         @Override public boolean hasPrevious() {
-            // Aquí va su código.
+            return this.anterior != null;
         }
 
         /* Nos da el elemento anterior. */
         @Override public T previous() {
-            // Aquí va su código.
+            if(hasPrevious() != true) throw new NoSuchElementException();
+            siguiente =anterior;
+            anterior = anterior.anterior;
+            return siguiente.elemento;
         }
 
         /* Mueve el iterador al inicio de la lista. */
         @Override public void start() {
-            // Aquí va su código.
+            siguiente = cabeza;
+            anterior = null;
         }
 
         /* Mueve el iterador al final de la lista. */
         @Override public void end() {
-            // Aquí va su código.
+            anterior = rabo;
+            siguiente = null;
         }
     }
 
@@ -88,7 +96,7 @@ public class Lista<T> implements Coleccion<T> {
      * @return la longitud de la lista, el número de elementos que contiene.
      */
     public int getLongitud() {
-        // Aquí va su código.
+        return longitud;
     }
 
     /**
@@ -97,7 +105,7 @@ public class Lista<T> implements Coleccion<T> {
      * @return el número elementos en la lista.
      */
     @Override public int getElementos() {
-        // Aquí va su código.
+        return longitud;
     }
 
     /**
@@ -106,7 +114,7 @@ public class Lista<T> implements Coleccion<T> {
      *         otro caso.
      */
     @Override public boolean esVacia() {
-        // Aquí va su código.
+        return longitud == 0;
     }
 
     /**
@@ -118,7 +126,7 @@ public class Lista<T> implements Coleccion<T> {
      *         <code>null</code>.
      */
     @Override public void agrega(T elemento) {
-        // Aquí va su código.
+        agregaFinal(elemento);
     }
 
     /**
@@ -129,7 +137,17 @@ public class Lista<T> implements Coleccion<T> {
      *         <code>null</code>.
      */
     public void agregaFinal(T elemento) {
-        // Aquí va su código.
+        if(elemento == null)
+            throw new IllegalArgumentException();
+        Nodo aux = new Nodo(elemento);
+        if (rabo == null) {
+            cabeza = rabo = aux;
+        }else{
+            rabo.siguiente = aux;
+            aux.anterior = rabo;
+            rabo = aux;
+        }
+        longitud++;
     }
 
     /**
@@ -140,7 +158,19 @@ public class Lista<T> implements Coleccion<T> {
      *         <code>null</code>.
      */
     public void agregaInicio(T elemento) {
-        // Aquí va su código.
+        if(elemento == null)
+            throw new IllegalArgumentException();
+
+        Nodo aux = new Nodo(elemento);
+        if(cabeza == null) {
+            cabeza = rabo = aux;
+        }else {
+            cabeza.anterior = aux;
+            aux.siguiente = cabeza;
+            cabeza = aux;
+        }
+
+        longitud++;
     }
 
     /**
@@ -159,7 +189,30 @@ public class Lista<T> implements Coleccion<T> {
      *         <code>null</code>.
      */
     public void inserta(int i, T elemento) {
-        // Aquí va su código.
+        if(elemento == null) throw new IllegalArgumentException();
+
+        else if(i<=0)
+            agregaInicio(elemento);
+        
+        else if (i>=getElementos()) 
+            agregaFinal(elemento);
+
+
+        else{
+            
+            Nodo nuevo = new Nodo(elemento);
+            Nodo aux = cabeza;
+
+            for(int j=0; j<i;j++)
+                aux = aux.siguiente;
+
+            aux.anterior.siguiente = nuevo;
+            nuevo.anterior = aux.anterior;
+            nuevo.siguiente = aux;
+            aux.anterior = nuevo;
+        
+            longitud++;
+        }
     }
 
     /**
@@ -167,8 +220,33 @@ public class Lista<T> implements Coleccion<T> {
      * lista, el método no la modifica.
      * @param elemento el elemento a eliminar.
      */
-    @Override public void elimina(T elemento) {
-        // Aquí va su código.
+   @Override public void elimina(T elemento) {
+        Nodo eliminar = search(cabeza ,elemento);
+        if (eliminar == null)
+            return;
+        if (cabeza == rabo) {
+            cabeza = rabo = null;
+            
+        } else if (eliminar == cabeza) {
+            cabeza = cabeza.siguiente;
+            cabeza.anterior = null;
+        } else if (rabo == eliminar) {
+            rabo = rabo.anterior;
+            rabo.siguiente = null;
+        } else {
+            eliminar.siguiente.anterior = eliminar.anterior;
+            eliminar.anterior.siguiente = eliminar.siguiente;
+        }
+        longitud--;
+    }
+
+     /*Método recursivo*/
+    private Nodo search(Nodo nodo, T elemento) {
+        if(nodo == null)
+            return null;
+        if(nodo.elemento.equals(elemento))
+            return nodo;
+        return search(nodo.siguiente, elemento);
     }
 
     /**
@@ -177,7 +255,16 @@ public class Lista<T> implements Coleccion<T> {
      * @throws NoSuchElementException si la lista es vacía.
      */
     public T eliminaPrimero() {
-        // Aquí va su código.
+        if (cabeza == null)
+            throw new NoSuchElementException();
+        T x = cabeza.elemento;
+        cabeza = cabeza.siguiente;
+        if (cabeza != null)
+            cabeza.anterior = null;
+        else
+            rabo = null;
+        longitud--;
+        return x;
     }
 
     /**
@@ -186,7 +273,16 @@ public class Lista<T> implements Coleccion<T> {
      * @throws NoSuchElementException si la lista es vacía.
      */
     public T eliminaUltimo() {
-        // Aquí va su código.
+        if(rabo == null)
+            throw new NoSuchElementException();
+        T x = rabo.elemento;
+        rabo = rabo.anterior;
+        if (rabo != null)
+            rabo.siguiente = null;
+        else
+            cabeza = null;
+        longitud--;
+        return x;
     }
 
     /**
@@ -196,7 +292,7 @@ public class Lista<T> implements Coleccion<T> {
      *         <tt>false</tt> en otro caso.
      */
     @Override public boolean contiene(T elemento) {
-        // Aquí va su código.
+        return search(cabeza, elemento) != null;
     }
 
     /**
@@ -204,7 +300,18 @@ public class Lista<T> implements Coleccion<T> {
      * @return una nueva lista que es la reversa la que manda llamar el método.
      */
     public Lista<T> reversa() {
-        // Aquí va su código.
+         Lista<T> flipped_list = new Lista<T>();
+        
+        return reversa(flipped_list, cabeza);
+    }
+
+    /*Metodo Recursivo*/
+
+    private Lista<T> reversa(Lista<T> flipped_list, Nodo n){
+        if (n == null)
+            return flipped_list;
+        flipped_list.agregaInicio(n.elemento);
+        return reversa(flipped_list,n.siguiente);
     }
 
     /**
@@ -213,14 +320,24 @@ public class Lista<T> implements Coleccion<T> {
      * @return una copiad de la lista.
      */
     public Lista<T> copia() {
-        // Aquí va su código.
+        Lista<T> y = new Lista<T>();
+        return copia(y, cabeza);
+    }
+
+    /*Metodo recursivo*/ 
+    private Lista<T> copia(Lista<T> y, Nodo x){
+        if(x == null)
+            return y;
+        y.agregaFinal(x.elemento);
+        return copia(y, x.siguiente);
     }
 
     /**
      * Limpia la lista de elementos, dejándola vacía.
      */
     @Override public void limpia() {
-        // Aquí va su código.
+        cabeza = rabo = null;
+        longitud = 0;
     }
 
     /**
@@ -229,7 +346,9 @@ public class Lista<T> implements Coleccion<T> {
      * @throws NoSuchElementException si la lista es vacía.
      */
     public T getPrimero() {
-        // Aquí va su código.
+        if(cabeza == null) throw new NoSuchElementException();
+
+       return cabeza.elemento;
     }
 
     /**
@@ -238,7 +357,10 @@ public class Lista<T> implements Coleccion<T> {
      * @throws NoSuchElementException si la lista es vacía.
      */
     public T getUltimo() {
-        // Aquí va su código.
+        if (rabo == null) {
+            throw new NoSuchElementException();
+        }
+        return rabo.elemento;
     }
 
     /**
@@ -249,9 +371,18 @@ public class Lista<T> implements Coleccion<T> {
      *         igual que el número de elementos en la lista.
      */
     public T get(int i) {
-        // Aquí va su código.
+        if (i < 0 || i >= longitud) 
+            throw new ExcepcionIndiceInvalido();
+            return get(cabeza, i--,0);
     }
 
+    /*Método Recursivo */
+
+    private T get(Nodo m, int x, int y){
+        if(x == y)
+            return m.elemento;
+        return get(m.siguiente,x,++y);
+    }
     /**
      * Regresa el índice del elemento recibido en la lista.
      * @param elemento el elemento del que se busca el índice.
@@ -259,7 +390,15 @@ public class Lista<T> implements Coleccion<T> {
      *         no está contenido en la lista.
      */
     public int indiceDe(T elemento) {
-        // Aquí va su código.
+        Nodo aux = cabeza;
+        int n = 0;
+        while (aux != null) {
+            if (aux.elemento.equals(elemento))
+                return n;
+            n++;
+            aux = aux.siguiente;
+        }
+        return -1;
     }
 
     /**
@@ -267,7 +406,16 @@ public class Lista<T> implements Coleccion<T> {
      * @return una representación en cadena de la lista.
      */
     @Override public String toString() {
-        // Aquí va su código.
+        Nodo aux = cabeza;
+        String string_lista = "[";
+        while (aux != null) {
+            string_lista += aux.elemento;
+            aux = aux.siguiente;
+            if (aux != null)
+                string_lista += ", ";
+        }
+        string_lista += "]";
+        return string_lista;
     }
 
     /**
@@ -280,7 +428,19 @@ public class Lista<T> implements Coleccion<T> {
         if (objeto == null || getClass() != objeto.getClass())
             return false;
         @SuppressWarnings("unchecked") Lista<T> lista = (Lista<T>)objeto;
-        // Aquí va su código.
+        if(lista.getLongitud() != getLongitud())
+            return false;
+
+            Nodo x = cabeza;
+            Nodo y = lista.cabeza;
+            while(x != null && y != null){
+                if(!x.elemento.equals(y.elemento))
+                    return false;
+                
+                x = x.siguiente;
+                y = y.siguiente;
+            }
+        return true;
     }
 
     /**
@@ -308,7 +468,53 @@ public class Lista<T> implements Coleccion<T> {
      * @return una copia de la lista, pero ordenada.
      */
     public Lista<T> mergeSort(Comparator<T> comparador) {
-        // Aquí va su código.
+        Lista<T> list = copia();
+        Lista<T> list2 = new Lista<T>();
+        Lista<T> list3 = new Lista<T>();
+
+        if(longitud <= 1) return list;
+
+        int middle = list.getLongitud()/2;
+
+        for(int i=0; i<middle; i++)
+            list2.agrega(list.get(i));
+        for(int i = middle; i<list.getLongitud(); i++)
+            list3.agrega(list.get(i));
+
+        list2 = list2.mergeSort(comparador);
+        list3 = list3.mergeSort(comparador);
+        return mezcla(list2,list3,comparador);
+    }
+
+    private Lista<T> mezcla(Lista<T> list1, Lista<T> list2, Comparator<T> comparador) {
+
+        Nodo aux = list1.cabeza;
+        Nodo aux2 = list2.cabeza;
+        T elemento;
+        Lista<T> list = new Lista<T>();
+
+        while(aux != null && aux2 != null) {
+            if(comparador.compare(aux.elemento,aux2.elemento) <= 0) {
+                list.agrega(aux.elemento);
+                aux = aux.siguiente;
+            }else {
+                list.agrega(aux2.elemento);
+                aux2 = aux2.siguiente;
+            }
+        }
+
+        while(aux != null) {
+            list.agrega(aux.elemento);
+            aux = aux.siguiente;
+        }
+
+        while(aux2 != null) {
+            list.agrega(aux2.elemento);
+            aux2 = aux2.siguiente;
+        }
+
+        return list;
+
     }
 
     /**
@@ -333,7 +539,14 @@ public class Lista<T> implements Coleccion<T> {
      *         <tt>false</tt> en otro caso.
      */
     public boolean busquedaLineal(T elemento, Comparator<T> comparador) {
-        // Aquí va su código.
+        Nodo aux = cabeza;
+
+        while(aux != null) {
+            if(comparador.compare(elemento, aux.elemento) == 0)
+                return true;
+            aux = aux.siguiente;
+        }
+        return false;
     }
 
     /**
