--- src/main/java/mx/unam/ciencias/edd/MeteSaca.java
+++ src/main/java/mx/unam/ciencias/edd/MeteSaca.java
@@ -22,7 +22,7 @@ public abstract class MeteSaca<T> {
          * @param elemento el elemento del nodo.
          */
         public Nodo(T elemento) {
-            // Aquí va su código.
+            this.elemento = elemento;
         }
     }
 
@@ -43,7 +43,16 @@ public abstract class MeteSaca<T> {
      * @throws NoSuchElementException si la estructura está vacía.
      */
     public T saca() {
-        // Aquí va su código.
+        if(esVacia()) {
+            throw new NoSuchElementException();
+        }
+        T elemento = cabeza.elemento;
+        if (cabeza == rabo) {
+            rabo = cabeza = null;
+        }else{
+            cabeza = cabeza.siguiente; 
+        }
+        return elemento;
     }
 
     /**
@@ -53,7 +62,9 @@ public abstract class MeteSaca<T> {
      * @throws NoSuchElementException si la estructura está vacía.
      */
     public T mira() {
-        // Aquí va su código.
+        if(esVacia()) 
+            throw new NoSuchElementException();
+        return cabeza.elemento;
     }
 
     /**
@@ -62,7 +73,7 @@ public abstract class MeteSaca<T> {
      *         <tt>false</tt> en otro caso.
      */
     public boolean esVacia() {
-        // Aquí va su código.
+        return cabeza == null;
     }
 
     /**
@@ -76,6 +87,17 @@ public abstract class MeteSaca<T> {
         if (object == null || getClass() != object.getClass())
             return false;
         @SuppressWarnings("unchecked") MeteSaca<T> m = (MeteSaca<T>)object;
-        // Aquí va su código.
+        Nodo x = cabeza;
+        Nodo y = m.cabeza;
+        while (x != null && y != null) {
+            if(!x.elemento.equals(y.elemento))
+
+            return false;
+            x = x.siguiente;
+            y=y.siguiente;           
+        }
+        if(x != null || y !=null)
+            return false;
+        return true;
     }
 }
