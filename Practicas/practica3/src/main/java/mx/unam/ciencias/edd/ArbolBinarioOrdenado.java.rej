--- src/main/java/mx/unam/ciencias/edd/ArbolBinarioOrdenado.java
+++ src/main/java/mx/unam/ciencias/edd/ArbolBinarioOrdenado.java
@@ -25,19 +25,37 @@ public class ArbolBinarioOrdenado<T extends Comparable<T>>
 
         /* Inicializa al iterador. */
         public Iterador() {
-            // Aquí va su código.
+            pila = new Pila<Vertice>();
+            if(esVacia())
+                return;
+            Vertice aux = raiz;
+            pila.mete(raiz);
+            while(aux.hayIzquierdo()) {
+                pila.mete(aux.izquierdo);
+                aux = aux.izquierdo;
+            }
         }
 
         /* Nos dice si hay un elemento siguiente. */
         @Override public boolean hasNext() {
-            // Aquí va su código.
+            return !pila.esVacia();
         }
 
         /* Regresa el siguiente elemento en orden DFS in-order. */
         @Override public T next() {
-            // Aquí va su código.
+           Vertice x = pila.saca();
+            T y = x.get();
+            if(x.hayDerecho()) {
+                pila.mete(x.derecho);
+                x = x.derecho;
+                while(x.hayIzquierdo()) {
+                    x = x.izquierdo;
+                    pila.mete(x);
+                }
+            }
+            return y;
+         }
         }
-    }
 
     /**
      * El vértice del último elemento agegado. Este vértice sólo se puede
@@ -69,9 +87,39 @@ public class ArbolBinarioOrdenado<T extends Comparable<T>>
      * @param elemento el elemento a agregar.
      */
     @Override public void agrega(T elemento) {
-        // Aquí va su código.
+        if(elemento == null) throw new IllegalArgumentException();
+         if(raiz == null){
+             raiz = new Vertice(elemento);
+             ultimoAgregado = raiz;
+             elementos++;
+             return;
+         }
+         agrega(elemento,raiz);
+         elementos++;
     }
 
+    //Método auxiliar
+    private void agrega(T elemento, Vertice vertice1) {
+
+         if(vertice1.elemento.compareTo(elemento) <= 0) {
+            if(vertice1.derecho == null) {
+                Vertice vertice = new Vertice(elemento);
+                vertice1.derecho = vertice;
+                vertice.padre = vertice1;
+                ultimoAgregado = vertice;
+             }else
+                agrega(elemento, vertice1.derecho);
+         }else { 
+               if(vertice1.izquierdo == null){
+                   Vertice vertice = new Vertice(elemento);
+                   vertice1.izquierdo = vertice;
+                   vertice.padre = vertice1;
+                   ultimoAgregado = vertice;
+                }else
+                   agrega(elemento, vertice1.izquierdo);
+         }
+     }
+
     /**
      * Elimina un elemento. Si el elemento no está en el árbol, no hace nada; si
      * está varias veces, elimina el primero que encuentre (in-order). El árbol
@@ -79,7 +127,19 @@ public class ArbolBinarioOrdenado<T extends Comparable<T>>
      * @param elemento el elemento a eliminar.
      */
     @Override public void elimina(T elemento) {
-        // Aquí va su código.
+        if(elemento == null)
+            return;
+        Vertice vert = (Vertice)busca(elemento);
+
+        if(vert == null)
+            return;
+        elementos--;
+        if(elementos==0) {
+            raiz = null;
+            return;
+        }if(vert.hayIzquierdo() && vert.hayDerecho())
+            vert = intercambiaEliminable(vert);
+        eliminaVertice(vert);
     }
 
     /**
@@ -92,9 +152,18 @@ public class ArbolBinarioOrdenado<T extends Comparable<T>>
      *         de <code>null</code>.
      */
     protected Vertice intercambiaEliminable(Vertice vertice) {
-        // Aquí va su código.
+        Vertice v = MaxArbol(vertice.izquierdo);
+        T aux = v.elemento;
+        v.elemento = vertice.elemento;
+        vertice.elemento =aux;
+        return v;
     }
 
+    private Vertice MaxArbol(Vertice v) {
+        if(!v.hayDerecho())
+            return v;
+        return MaxArbol(v.derecho);
+    }
     /**
      * Elimina un vértice que a lo más tiene un hijo distinto de
      * <code>null</code> subiendo ese hijo (si existe).
@@ -102,7 +171,62 @@ public class ArbolBinarioOrdenado<T extends Comparable<T>>
      *                distinto de <code>null</code>.
      */
     protected void eliminaVertice(Vertice vertice) {
-        // Aquí va su código.
+        if(vertice.hayPadre()){
+            if(vertice.padre.hayIzquierdo()){
+                if(vertice.padre.izquierdo.equals(vertice)){
+                    if(vertice.hayIzquierdo()){
+                        vertice.padre.izquierdo = vertice.izquierdo;
+                        vertice.izquierdo.padre = vertice.padre;
+                        return;
+                    }
+                    if(vertice.hayDerecho()){
+                        vertice.padre.izquierdo = vertice.derecho;
+                        vertice.derecho.padre = vertice.padre;
+                        return;   
+                    }
+                    vertice.padre.izquierdo = null;
+                }
+                else{
+                    if(vertice.hayIzquierdo()){
+                        vertice.padre.derecho = vertice.izquierdo;
+                        vertice.izquierdo.padre = vertice.padre;
+                        return;
+                    }
+                    if(vertice.hayDerecho()){
+                        vertice.padre.derecho = vertice.derecho;
+                        vertice.derecho.padre = vertice.padre;
+                        return;
+                    }
+                    vertice.padre.derecho = null;
+                }
+            }
+            else{
+                if(vertice.hayIzquierdo()){
+                    vertice.padre.derecho = vertice.izquierdo;
+                    vertice.izquierdo.padre = vertice.padre;
+                    return;
+                }
+                if(vertice.hayDerecho()){
+                    vertice.padre.derecho = vertice.derecho;
+                    vertice.derecho.padre = vertice.padre;
+                    return;
+                }
+                vertice.padre.derecho = null;
+            }
+        }
+        else{
+            if(vertice.hayIzquierdo()){
+                raiz = vertice.izquierdo;
+                vertice.izquierdo.padre = null;
+                return;
+            }
+            if(vertice.hayDerecho()){
+                raiz = vertice.derecho;
+                vertice.derecho.padre =null;
+                return;
+            }
+        }
+
     }
 
     /**
@@ -113,9 +237,25 @@ public class ArbolBinarioOrdenado<T extends Comparable<T>>
      *         encuentra; <tt>null</tt> en otro caso.
      */
     @Override public VerticeArbolBinario<T> busca(T elemento) {
-        // Aquí va su código.
+        if(raiz == null || elemento == null)
+             return null;
+         return busca(elemento, raiz);
     }
 
+    private  VerticeArbolBinario<T> busca(T elemento, Vertice vertice) {
+
+        if(vertice.elemento.equals(elemento))
+             return(VerticeArbolBinario<T>) vertice;
+        if(vertice.elemento.compareTo(elemento) < 0) {
+             if(vertice.derecho != null)
+                 return busca(elemento, vertice.derecho);
+             return null;
+         }else {
+             if(vertice.izquierdo != null)
+                 return busca(elemento, vertice.izquierdo);
+             return null;
+        }
+    }
     /**
      * Regresa el vértice que contiene el último elemento agregado al
      * árbol. Este método sólo se puede garantizar que funcione
@@ -137,7 +277,27 @@ public class ArbolBinarioOrdenado<T extends Comparable<T>>
      * @param vertice el vértice sobre el que vamos a girar.
      */
     public void giraDerecha(VerticeArbolBinario<T> vertice) {
-        // Aquí va su código.
+        if (vertice == null || !vertice.hayIzquierdo())
+            return;
+        
+        Vertice u = vertice(vertice);
+        Vertice v = u.izquierdo;
+
+        if(u == raiz) {
+            raiz = v;
+            v.padre = null;
+        }else {
+            v.padre = u.padre;
+            if(u.padre.izquierdo==u)
+                u.padre.izquierdo = v;
+            else
+                u.padre.derecho = v;
+        }
+        u.izquierdo = v.derecho;
+        if (v.hayDerecho())
+            v.derecho.padre = u;
+        u.padre = v;
+        v.derecho = u;
     }
 
     /**
@@ -146,16 +306,49 @@ public class ArbolBinarioOrdenado<T extends Comparable<T>>
      * @param vertice el vértice sobre el que vamos a girar.
      */
     public void giraIzquierda(VerticeArbolBinario<T> vertice) {
-        // Aquí va su código.
+        girarIzquierda((Vertice)vertice);
     }
 
+    private void girarIzquierda(Vertice vertice) {
+        if(vertice == null || !vertice.hayDerecho())
+            return;
+        Vertice aux = vertice.derecho;
+        aux.padre = null;
+        if(vertice.hayPadre()) {
+            Vertice aux2 = vertice.padre;
+            aux.padre = aux2;
+            if(vertice.padre.izquierdo == vertice)
+                vertice.padre.izquierdo = aux;
+            else
+                vertice.padre.derecho = aux;
+        }else
+            raiz = aux;
+
+        vertice.padre = null;
+        vertice.derecho = null;
+        if(aux.hayIzquierdo()) {
+            Vertice v = aux.izquierdo;
+            v.padre = vertice;
+            vertice.derecho = v;
+        }
+        aux.izquierdo = vertice;
+        vertice.padre = aux;
+
+    }
     /**
      * Realiza un recorrido DFS <em>pre-order</em> en el árbol, ejecutando la
      * acción recibida en cada elemento del árbol.
      * @param accion la acción a realizar en cada elemento del árbol.
      */
     public void dfsPreOrder(AccionVerticeArbolBinario<T> accion) {
-        // Aquí va su código.
+        dfsPreOrder(raiz,accion);
+    }
+
+    private void dfsPreOrder(Vertice vertice, AccionVerticeArbolBinario<T> accion) {
+        if(vertice==null) return;
+        accion.actua(vertice);
+        dfsPreOrder(vertice.izquierdo,accion);
+        dfsPreOrder(vertice.derecho,accion);
     }
 
     /**
@@ -164,18 +357,30 @@ public class ArbolBinarioOrdenado<T extends Comparable<T>>
      * @param accion la acción a realizar en cada elemento del árbol.
      */
     public void dfsInOrder(AccionVerticeArbolBinario<T> accion) {
-        // Aquí va su código.
+        dfsInOrder(raiz,accion);
     }
 
+    private void dfsInOrder(Vertice vertice, AccionVerticeArbolBinario<T> accion) {
+        if(vertice==null) return;
+        dfsInOrder(vertice.izquierdo,accion);
+        accion.actua(vertice);
+        dfsInOrder(vertice.derecho,accion);
+    }
     /**
      * Realiza un recorrido DFS <em>post-order</em> en el árbol, ejecutando la
      * acción recibida en cada elemento del árbol.
      * @param accion la acción a realizar en cada elemento del árbol.
      */
     public void dfsPostOrder(AccionVerticeArbolBinario<T> accion) {
-        // Aquí va su código.
+        dfsPostOrder(raiz,accion);
     }
 
+    private void dfsPostOrder(Vertice vertice, AccionVerticeArbolBinario<T> accion) {
+        if(vertice==null) return;
+        dfsPostOrder(vertice.izquierdo,accion);
+        dfsPostOrder(vertice.derecho,accion);
+        accion.actua(vertice);
+    }
     /**
      * Regresa un iterador para iterar el árbol. El árbol se itera en orden.
      * @return un iterador para iterar el árbol.
