--- src/main/java/mx/unam/ciencias/edd/ArbolBinario.java
+++ src/main/java/mx/unam/ciencias/edd/ArbolBinario.java
@@ -29,7 +29,7 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          * @param elemento el elemento del vértice.
          */
         public Vertice(T elemento) {
-            // Aquí va su código.
+            this.elemento = elemento;
         }
 
         /**
@@ -38,7 +38,7 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          *         <tt>false</tt> en otro caso.
          */
         @Override public boolean hayPadre() {
-            // Aquí va su código.
+            return padre != null;
         }
 
         /**
@@ -47,7 +47,7 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          *         <tt>false</tt> en otro caso.
          */
         @Override public boolean hayIzquierdo() {
-            // Aquí va su código.
+            return izquierdo != null; 
         }
 
         /**
@@ -56,7 +56,7 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          *         <tt>false</tt> en otro caso.
          */
         @Override public boolean hayDerecho() {
-            // Aquí va su código.
+            return derecho != null;
         }
 
         /**
@@ -65,7 +65,8 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          * @throws NoSuchElementException si el vértice no tiene padre.
          */
         @Override public VerticeArbolBinario<T> padre() {
-            // Aquí va su código.
+            if(padre == null) throw new NoSuchElementException();
+            return this.padre;
         }
 
         /**
@@ -74,7 +75,8 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          * @throws NoSuchElementException si el vértice no tiene izquierdo.
          */
         @Override public VerticeArbolBinario<T> izquierdo() {
-            // Aquí va su código.
+            if(izquierdo == null) throw new NoSuchElementException();
+            return this.izquierdo;
         }
 
         /**
@@ -83,7 +85,9 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          * @throws NoSuchElementException si el vértice no tiene derecho.
          */
         @Override public VerticeArbolBinario<T> derecho() {
-            // Aquí va su código.
+            if(derecho == null) throw new NoSuchElementException();
+
+             return this.derecho;
         }
 
         /**
@@ -91,23 +95,37 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          * @return la altura del vértice.
          */
         @Override public int altura() {
-            // Aquí va su código.
+            return altura2(this);
         }
 
+        /*Método auxiliar de altura */
+         private int altura2(Vertice vertice) {
+             if(vertice == null)
+                 return -1;
+             return 1 + Math.max(altura2(vertice.izquierdo), altura2(vertice.derecho));
+         }
+
         /**
          * Regresa la profundidad del vértice.
          * @return la profundidad del vértice.
          */
         @Override public int profundidad() {
-            // Aquí va su código.
+            return profundidad2(this);
         }
 
+        /*Método auxiliar de profundidad */
+         private int profundidad2(Vertice vertice) {
+             if(!vertice.hayPadre())
+                 return 0;
+             return 1 + profundidad2(vertice.padre);
+         }
+
         /**
          * Regresa el elemento al que apunta el vértice.
          * @return el elemento al que apunta el vértice.
          */
         @Override public T get() {
-            // Aquí va su código.
+            return elemento;
         }
 
         /**
@@ -124,7 +142,33 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
             if (objeto == null || getClass() != objeto.getClass())
                 return false;
             @SuppressWarnings("unchecked") Vertice vertice = (Vertice)objeto;
-            // Aquí va su código.
+            if(!elemento.equals(vertice.elemento))
+                return false;
+            return equalsDer(this, vertice) && equalsIzq(this, vertice);
+        }
+
+        private boolean equalsIzq(Vertice v1, Vertice v2){
+           if (v1.hayIzquierdo() && v2.hayIzquierdo() && v2.elemento.equals(v1.elemento))
+                return v1.izquierdo.equals(v2.izquierdo);
+            if(!v1.hayIzquierdo() && !v2.hayIzquierdo() && v2.elemento.equals(v1.elemento))
+                return true;
+            if (v1.hayIzquierdo() && !v2.hayIzquierdo())
+                return false;
+            if(!v1.hayIzquierdo() && !v2.hayIzquierdo())
+                return false;
+            return false;
+        }
+
+        private boolean equalsDer(Vertice v3, Vertice v4){
+            if (v3.hayDerecho() && v4.hayDerecho() && v4.elemento.equals(v3.elemento))
+                return v3.derecho.equals(v4.derecho);
+            if(!v3.hayDerecho() && !v4.hayDerecho() && v4.elemento.equals(v3.elemento))
+                return true;
+            if (v3.hayDerecho() && !v4.hayDerecho())
+                return false;
+            if(!v3.hayDerecho() && !v4.hayDerecho())
+                return false;
+            return false;
         }
 
         /**
@@ -132,7 +176,7 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          * @return una representación en cadena del vértice.
          */
         public String toString() {
-            // Aquí va su código.
+            return elemento.toString();
         }
     }
 
@@ -153,7 +197,8 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
      *        binario.
      */
     public ArbolBinario(Coleccion<T> coleccion) {
-        // Aquí va su código.
+        for (T elemento : coleccion)
+        	agrega(elemento);
     }
 
     /**
@@ -175,7 +220,9 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
      * @return la altura del árbol.
      */
     public int altura() {
-        // Aquí va su código.
+        if(raiz == null)
+            return -1;
+        return raiz.altura();
     }
 
     /**
@@ -183,7 +230,7 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
      * @return el número de elementos en el árbol.
      */
     @Override public int getElementos() {
-        // Aquí va su código.
+        return elementos;
     }
 
     /**
@@ -193,7 +240,9 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
      *         <code>false</code> en otro caso.
      */
     @Override public boolean contiene(T elemento) {
-        // Aquí va su código.
+        if(elemento.equals(null))
+            return false;
+        return busca(elemento) != null;
     }
 
     /**
@@ -204,7 +253,28 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
      *         <tt>null</tt> en otro caso.
      */
     public VerticeArbolBinario<T> busca(T elemento) {
-        // Aquí va su código.
+        if(elemento == null)
+            return null;
+         if(esVacia())
+            return null;
+         return busca(raiz, elemento);				
+    }
+
+     private VerticeArbolBinario<T> busca(Vertice vertice, T elemento){
+        Cola<Vertice> v = new Cola<Vertice>();
+        v.mete(vertice);
+        while(!v.esVacia()) {
+            Vertice aux = v.cabeza.elemento;
+            if(v.saca().elemento.equals(elemento))
+                return aux;
+            else {
+                if(aux.hayIzquierdo())
+                    v.mete(aux.izquierdo);
+                if(aux.hayDerecho())
+                    v.mete(aux.derecho);
+            }
+        }
+        return null;
     }
 
     /**
@@ -213,7 +283,9 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
      * @throws NoSuchElementException si el árbol es vacío.
      */
     public VerticeArbolBinario<T> raiz() {
-        // Aquí va su código.
+        if(raiz == null)
+        	throw new NoSuchElementException();
+        return raiz;
     }
 
     /**
@@ -222,14 +294,15 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
      *         otro caso.
      */
     @Override public boolean esVacia() {
-        // Aquí va su código.
+        return raiz == null;
     }
 
     /**
      * Limpia el árbol de elementos, dejándolo vacío.
      */
     @Override public void limpia() {
-        // Aquí va su código.
+        raiz = null;
+        elementos = 0;
     }
 
     /**
@@ -243,7 +316,13 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
             return false;
         @SuppressWarnings("unchecked")
             ArbolBinario<T> arbol = (ArbolBinario<T>)objeto;
-        // Aquí va su código.
+        if (raiz == null && arbol.raiz == null)
+            return true;
+        if (raiz == null && arbol.raiz != null)
+            return false;
+        if (raiz != null && arbol.raiz == null)
+            return false;
+        return raiz.equals(arbol.raiz);
     }
 
     /**
@@ -251,7 +330,50 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
      * @return una representación en cadena del árbol.
      */
     @Override public String toString() {
-        // Aquí va su código.
+        if(raiz==null) return "";
+        boolean[] X = new boolean[altura()+1];
+        for (int i=0;i<altura()+1;i++)
+            X[i] = false;
+        return toString(raiz,0,X);
+    }
+
+
+
+    private String toString(Vertice vertice, int nivel, boolean[] rama) {
+
+        String p = vertice + "\n";
+        rama[nivel] = true;
+        if (vertice.izquierdo != null && vertice.derecho != null) {
+            p += Espacios(nivel, rama);
+            p += "├─›";
+            p += toString(vertice.izquierdo, nivel + 1, rama);
+            p += Espacios(nivel, rama);
+            p += "└─»";
+            rama[nivel] = false; 
+            p += toString(vertice.derecho, nivel + 1, rama);
+        }else if (vertice.izquierdo != null) {
+            p += Espacios(nivel, rama);
+            p += "└─›";
+            rama[nivel] = false; 
+            p += toString(vertice.izquierdo, nivel + 1, rama);
+        }else if (vertice.derecho != null) {
+            p += Espacios(nivel, rama);
+            p += "└─»";
+            rama[nivel] = false; 
+            p += toString(vertice.derecho, nivel + 1, rama);
+        }
+        return p;
+    }
+    // Ilustra los espacios
+    private String Espacios(int n, boolean[] rama) {
+        String e = "";
+        for (int i = 0; i < n; i++)
+            if(rama[i])
+                e += "│  "; 
+            else
+                e += "   "; 
+        return e;
+    
     }
 
     /**
